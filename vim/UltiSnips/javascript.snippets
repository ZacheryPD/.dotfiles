snippet if "A basic if-statement"
if($1){
	${0:${VISUAL}}
}
endsnippet

snippet else "A basic else statement"
else{
	${0:${VISUAL}}
}
endsnippet

snippet for "A basic for loop"
for(var ${1:i}=${2:0}; $1<${3:10}; $1++){
	${0:${VISUAL}}
}
endsnippet

snippet while "A basic while loop"
while(${1:true}){
	${0:${VISUAL}}
}
endsnippet

snippet ' "Autocomplete quotes"
'${1:${VISUAL}}' ${0}
endsnippet

snippet " "Autocomplete quotes"
"${1:${VISUAL}}" ${0}
endsnippet

snippet function "A basic annon function"
function(${1}){
	${0:${VISUAL}}
}
endsnippet

snippet info "A basic log.info snippet"
self.log.info(${0});
endsnippet

snippet todo "A todo comment snippet"
//TODO: ${0:"something needs to be done.."}
endsnippet

snippet classcomment "A snippet for commenting classes"
/**
 * @author ${1:Zachery DeLong https://github.com/ZacheryPD}
 * @version ${2: 0.0.1}
 * 
 * overview:
 *   ${3:This is a class designed to...}
 *
 * Method breakdown
 * => ${4:MyMethod()}
*/
endsnippet
snippet methodcomment "A snippet form commenting methods"
/**
 * @return ${1:void}
 * @param ${2:none}
 * overview 
 *   ${3}
*/
endsnippet
snippet class "A snippet for creating class comments, ends on another snippet which can optionally be expanded"
classcomment${0}
class ${1:MyClass} ${2: extends Controller}
{
	void __construct() { ${3} }
	void __destruct() { ${4} }
}
endsnippet

snippet /* "A multi-line comment function"
/*
	${0:${VISUAL:Comment...}}
*/
endsnippet

snippet { "a curly-brace autocomplete snippet" 
{
	${0:${VISUAL:Number: 1}}
}
endsnippet
